%% --------------- Compute STA of focal white noise in MATLAB (not Java) -------------------
%% Function: Generate STAs for cells that were stimulated with the Voronoi stimulus

%% How to use:
%     1) Called from sta_focal_WN
%     2) Need to have spikes loaded and computes an STA by parsing the movie file correctly based on the number of cells targeted in the run


%% Potential problems:
%     1) Could have a problem parsing movie file correctly for multiple
%     cells (limited testing)
%     2) Binning problems with matlab STA code



%% Inputs
% datarun : generated in sta_focal_WN by load_data
% mdf_file : white noise xml
% num_frames : integer of max frame number (eg 30)
% spikes: n x1 vector of spike times in seconds. Obtained from datarun
% plotting: 1 or 0 for true or false whether to plot the timecourse
% cell : which cell is the STA being computed for, necessary to figure out
% which part of the movie to use
% num_cells : total number of cells targeted with this movie so that it
% knows how many sections to parse the movie into


%% Results
% sta : Computed in matlab not java, binning problems
% timecourse: From sta sig stixels
% significant stixels : standard parameters

%% Author
% Colleen Rhoades (rhoades@stanford.edu)
% April 7, 2015


function [sta] = compute_jitter_sta(datarun, mdf_file, num_frames, spikes, jitter_x, jitter_y,  stixel_size, num_colors)
%% This function computes the STA without relying on STAs from vision. The binning is slightly different from Vision.
%     mglBltTexture(frametex, [stimulus.x_start+jitterX, stimulus.y_start+jitterY, stimulus.span_width, stimulus.span_height], -1, -1);


%% ---------------------------------- Process movie ------------------------------
triggers=datarun.triggers; %onsets of the stimulus presentation

[mov,height,width,duration,refresh] = get_movie_ath(mdf_file,...
    triggers, 1,2);

duration = 3000;
[mvi] = load_movie(mdf_file, triggers);
% mvi = squeeze(mvi(:,:,1,:));
% Compute the time each stimulus frame occurred

bt_triggers = triggers - [0;triggers(1:end-1)];
avg_bt_triggers = mean(bt_triggers(2:end));
frames_per_trigger = round(avg_bt_triggers*1000/refresh);
last_trigger_time = ceil(triggers(end));
frame_times = zeros(ceil(last_trigger_time/refresh*1000),1);
for i = 1: length(triggers)
    temp = linspace(triggers(i),triggers(i)+ (frames_per_trigger-1)*refresh/1000,frames_per_trigger)';
    frame_times(i*frames_per_trigger-(frames_per_trigger-1):i*frames_per_trigger) = temp;
end

% initialize STA
sta=zeros(height*stixel_size,width*stixel_size,num_frames, 3); %height, width, frames back

tic
icnt=0;


%% Compute movie
movie = zeros(height*stixel_size, width*stixel_size, duration, 3);
for i = 1:duration%600
    if i  <= (duration - 1)
        true_frame = zeros(height*stixel_size, width*stixel_size);
        
        F = round(mvi.getFrame(i).getBuffer);
        shaped_frame = round(reshape(F(1:3:end),width,height)'-0.5);
        sized_frame = imresize(double(shaped_frame), stixel_size, 'nearest');
        %     movie(:,:,i,1) = sized_frame;
        sized_frame = sized_frame((stixel_size/2+1):(end - stixel_size/2), (stixel_size/2+1):(end - stixel_size/2));
        position = [jitter_x(i)+1+stixel_size/2, jitter_y(i)+1+stixel_size/2];
        % x and y might be reversed
        true_frame(position(1):(size(sized_frame,1)+position(1)-1), position(2):(size(sized_frame,2)+position(2)-1)) = sized_frame;
        movie(:,:,i,1) = true_frame;
        if num_colors == 3
            shaped_frame = round(reshape(F(2:3:end),width,height)'-0.5);
            sized_frame = imresize(double(shaped_frame), stixel_size, 'nearest');
            sized_frame = sized_frame((stixel_size/2+1):(end - stixel_size/2), (stixel_size/2+1):(end - stixel_size/2));
            position = [jitter_x(i)+1+stixel_size/2, jitter_y(i)+1+stixel_size/2];
            % x and y might be reversed
            true_frame(position(1):(size(sized_frame,1)+position(1)-1), position(2):(size(sized_frame,2)+position(2)-1)) = sized_frame;
            movie(:,:,i,2) = true_frame;
            
            shaped_frame = round(reshape(F(3:3:end),width,height)'-0.5);
            sized_frame = imresize(double(shaped_frame), stixel_size, 'nearest');
            sized_frame = sized_frame((stixel_size/2+1):(end - stixel_size/2), (stixel_size/2+1):(end - stixel_size/2));
            position = [jitter_x(i)+1+stixel_size/2, jitter_y(i)+1+stixel_size/2];
            % x and y might be reversed
            true_frame(position(1):(size(sized_frame,1)+position(1)-1), position(2):(size(sized_frame,2)+position(2)-1)) = sized_frame;
            movie(:,:,i,3) = true_frame;
        else
            movie(:,:,i,2) = true_frame;
            movie(:,:,i,3) = true_frame;
        end
    else
        continue
    end
    
end

%     save(['/Volumes/Lab/Users/crhoades/JitterMovie/2008-04-22-5/data004/chuck_', num2str(counter)],'movie', '-v7.3');



%% ---------------------- Use spike times to form STA --------------------------


spikes_by_frame = nan(length(frame_times)-1,1);
for i = 1:length(frame_times)-1
    spikes_by_frame(i) = sum(spikes >= frame_times(i) & spikes < frame_times(i+1));
end

sta =zeros(size(movie,1),size(movie,2), num_frames, 3);
% frameR = nan(size(movie,1)*size(movie,2), size(movie,3));
% for i = 1:size(movie,3)
%     frameR(:, i) = reshape(squeeze(movie(:,:,i,1)), [size(squeeze(movie(:,:,i,1)), 1)*size(squeeze(movie(:,:,i,1)), 2), 1]);   
% end

for i =1:size(movie,3)
    if mod(i,1000) == 0
        fprintf('%d out of %d \n', i, length(spikes_by_frame))
    end
    
    if spikes_by_frame(i) == 0
    else
        if i <= num_frames
        else
            for t = 1:num_frames
                subtract = num_frames - t +1;
                sta(:,:,subtract,:) = sta(:,:,subtract,:) + movie(:,:,i-t,:) * spikes_by_frame(i);

            end
        end
    end
    
end
sta_reshape = nan(size(movie,1), size(movie,2), num_frames);
for i = 1:num_frames
    sta_reshape(:,:,i) = reshape(sta(:,i), size(movie,1), size(movie,2));
end


figure;
imagesc(sta_reshape(:,:,28))
axis equal

    
    
    
    
    
    
    
    
    
    
