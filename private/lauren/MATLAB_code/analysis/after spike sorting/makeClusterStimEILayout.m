function [hAxes centerAxes] = makeClusterStimEILayout(ei, pElec, varargin)

% generates a figure with the ei of a cell surrounded by axes ordered to
% conveniently plot the secondary electrode linearities
%
% returns a cell array of 6 axes handles corresponding to the 6 secondary
% electrodes, in the order generated by getCluster (monotonically increasing order)
%
% top electrode of cluster corresponds to upper right axes, and 
% electrode-axes correspondance progresses clockwise from there

p = inputParser;

p.addRequired('ei', @isnumeric)
p.addRequired('pElec', @isnumeric)

p.addParamValue('neuronID', [], @isnumeric)
p.addParamValue('pathToData', [], @ischar)
p.addParamValue('cellType', [], @ischar)

p.parse(ei, pElec, varargin{:})

neuronID = p.Results.neuronID;
pathToData = p.Results.pathToData;
cellType = p.Results.cellType;

%%

% maximum normalized waveform value on each electrode (absolute value)
eiAmps = max(abs(ei),[],2);
eiAmps = eiAmps/max(eiAmps);

[xCoords yCoords] = getElectrodeCoords61();

%%
figure('position', [100 100 1000 700], 'color', 'white')
centerAxes = axes('units', 'pixels', 'position', [350 0 302 700]);
hex_contour(xCoords, yCoords, eiAmps, 16, 'fig_or_axes', centerAxes, 'contourSpacing', 'linear', 'plotCoords', false);

hold on

%primary electrode
plot(xCoords(pElec), yCoords(pElec), 'k*')

%other electrodes
for i = 1:64
    if ~any([9 25 57 pElec] == i)
        plot(xCoords(i), yCoords(i), 'ok','MarkerSize', 2, 'MarkerFaceColor', 'k')
    end
end

%array outline
plot([0 8.6603 8.6603 0 -8.6603 -8.6603 0], [10 5 -5 -10 -5 5 10], 'k-')

set(gca, 'XLim', [-10 10])
axis equal

%% draw lines from secondary electrodes to corresponding axes

centYLim = get(centerAxes, 'ylim');
sElecAxesPosY = centYLim(1)+(centYLim(2)-centYLim(1))*(1/700)*[552.5 347.5 142.5];

axis off

%% make secondary electrode axes

sElecs = getCluster(pElec);
sElecs(1) = []; %first electrode is primary
pPos = [xCoords(pElec) yCoords(pElec)];
hAxes = cell(1,6);

for ii = 1:6
    sPos = [xCoords(sElecs(ii)) yCoords(sElecs(ii))];
    if sPos(1) == pPos(1) && sPos(2) > pPos(2)
        hAxes{ii} = axes('units', 'pixels', 'position', [700 490 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) 10], [yCoords(sElecs(ii)) sElecAxesPosY(1)], 'k-')
    elseif sPos(1) > pPos(1) && sPos(2) > pPos(2)
        hAxes{ii} = axes('units', 'pixels', 'position', [700 285 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) 10], [yCoords(sElecs(ii)) sElecAxesPosY(2)], 'k-')
    elseif sPos(1) > pPos(1) && sPos(2) < pPos(2)
        hAxes{ii} = axes('units', 'pixels', 'position', [700 80 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) 10], [yCoords(sElecs(ii)) sElecAxesPosY(3)], 'k-')
    elseif sPos(1) == pPos(1) && sPos(2) < pPos(2)
        hAxes{ii} = axes('units', 'pixels', 'position', [50 80 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) -10], [yCoords(sElecs(ii)) sElecAxesPosY(3)], 'k-')
    elseif sPos(1) < pPos(1) && sPos(2) < pPos(2)
        hAxes{ii} = axes('units', 'pixels', 'position', [50 285 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) -10], [yCoords(sElecs(ii)) sElecAxesPosY(2)], 'k-')
    else
        hAxes{ii} = axes('units', 'pixels', 'position', [50 490 250 125]);
        plot(centerAxes, [xCoords(sElecs(ii)) -10], [yCoords(sElecs(ii)) sElecAxesPosY(1)], 'k-')
    end
end


%% add neuron/data label, if provided

axes(centerAxes)

if ~isempty(neuronID)
    text(0, centYLim(1)+(centYLim(2)-centYLim(1))*0.1, ['neuron' num2str(neuronID)], 'horizontalAlignment', 'center')
end

if ~isempty(pathToData)
    text(0, centYLim(1)+(centYLim(2)-centYLim(1))*0.12, pathToData, 'horizontalAlignment', 'center')
end

if ~isempty(cellType)
    text(0, centYLim(1)+(centYLim(2)-centYLim(1))*0.08, cellType, 'horizontalAlignment', 'center')
end


end

