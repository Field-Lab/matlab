% Training the parameters of the glm to data given a fixed set of stimulus
% filters

% Parameters to train:
% 1. the norm of the filter for each neuron
% 2. the coupling filters h (for each pair of neurons) - this is
% represented as cooridinates wrt some finite basis (of exponentials). This
% is a 3D matrix (basis-coordinate-vector x neuron 1 x neuron 2)
% 3. the base firing rate of each neuron. This is a vector (neurons x 1)

% The function to be optimized is the log-likelihood of the data:

% sum_i[ sum_{t_{i,j}}[ log(L_{i,t})] - sum_t[L_{i,t}dt] ]


% the arguments:
% p0 - initial search point - the vector is blocked according to neurons.
%    - within each neuron block it is ordered as:
%    - base firing rate, stimulus norm, postspike basis coeffs, coupling basis coeffs (ordered by neuron)



% basepars - structure with the following fields:
    % K - cell array of stimulus filter shapes (unit norm preferable) to use for each neuron.
    % maxt - # of timebins
    % n - spatial dimension
    % Nneurons - number of neurons 
    % postspike_basis - matrix where each column is a postspike basis function
    % couping_basis - "" coupling basis fns
    % nofilters_postspike - number of postspike basis fns
    % nofilers_coupling - "" coupling
    % fac - ratio of stimulus temporal resolution to spike train resolution
    %       - IMPORTANT!
    % fratio - ratio of timespan of postspike filter to stimulus filter
    % 
    
% stimpars - structure with the following fields:
    % x - stimulus (space x time)
    % dt - temporal resolution of stimulus
    
% trainpars - structure with the following fields:
    % dt - temporal resolution of spike train time bins
    % D - sparse logical matrix where ith column is the spike train of the ith neuron
    
% gopts - optimization options to pass to fminunc



% Returns:
% pstar - optimal solution returned by fminunc
% fstar, gstar,Hstar - functiom, gradient, and hessian value at the optimal point
% eflag,output - exit flag and output structure returned by fminunc

function [pstar fstar gstar Hstar eflag output] = train_glm_fixrk2(p0,basepars,stimpars,trainpars,gopts,NITER)


if (~exist('NITER','var'))
    NITER = 1;
end

% Initialize the trainpars structure
if (~isfield(trainpars,'psbasisGrad'))
    fprintf('Computing ps basis grad...');
    trainpars.psbasisGrad = grad_basis(trainpars.D(:,1:basepars.Nneurons),basepars.postspike_basis); 
    fprintf('done.\n');
end

if (size(trainpars.D,2) > 1 && ~isfield(trainpars,'cpbasisGrad'))
    fprintf('Computing cp basis grad...');
    trainpars.cpbasisGrad = grad_basis(trainpars.D,basepars.coupling_basis);
    fprintf('done.\n');
elseif (size(trainpars.D) == 1)
    trainpars.cpbasisGrad = [];
end

%--- 
if (~isfield(trainpars,'kx')) % Compute the stimulus convolved with the filter for each neuron and store
    for j=1:basepars.Nneurons
        %trainpars.kx = stimpars.dt .* sum(fastconv(stimpars.x(basepars.crop_idx(:,j),:),basepars.K{j},length(basepars.crop_idx(:,j)),size(stimpars.x,2)))';
        %trainpars.kx = filterstimulus_train(basepars.p0K,basepars,stimpars,trainpars,1); % modified by edoi (2012-01-04)
        trainpars.kx = filterstimulus_train(basepars.p0K,basepars,stimpars,trainpars,1); % modified by edoi (2012-01-04)
    end
end

% Optimization use fminunc
if (~exist('gopts','var') || isempty(gopts)) % Set to default options
    fprintf('USING DEFAULT TRAINING OPTIONS!\n');
    gopts = optimset('GradObj','on','Hessian', 'on', 'TolFun',10^(-6),'MaxIter',200,'display','iter');%,'PlotFcns',@optimplotfval);%,'DerivativeCheck','on')
end


1; % Here is where you want to validate your gradient and hessian functions
% disable plotting
%check_gradhess(0.1.*randn(size(p0)),@(p) ll_func2_fixfilt(p,basepars,stimpars,trainpars),[],vartest);


if (isempty(optimget(gopts,'PlotFcns'))) % plotting settings if not already set
    pfcn = setup_plotfcns(basepars.filtermode,basepars,stimpars,trainpars);
    gopts = optimset(gopts,'PlotFcns',pfcn);
end


pstar = p0;
for j=1:NITER
   fprintf('\nbottom of train_glm_fxrk2.m\n')
   keyboard
   [pstar fstar eflag output] = fminunc(@(p)ll_func2_fixrk2(p,basepars,stimpars,trainpars),pstar,gopts);
end
[fstar gstar Hstar] = ll_func2_fixrk2(pstar,basepars,stimpars,trainpars);


