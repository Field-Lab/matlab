function [fit_params params] = compute_snls(spikes, gen_signals, varargin)
% compute_snl     Compute static nonlinearity and fit
%
%  NOTE: this code only supports white noise movies generated by obvius
%
% usage:  [fit_params,gen_signals,params] = compute_snls(strfs, spikes, movie, <params>)
%
% arguments:    strfs - cell array, each element a YxXxCxT matrix specifying STRF for each cell
%              spikes - FxN matrix of spike times, each column a time point, each row a cell
%               movie - java object of stimulus movie
%            <params> - struct or list of optional parameters (see below)
%
% outputs:  
%
%     NOTE: each of these output variables is a cell array/matrix,
%               each element/column corresponding to one neuron
%
%          fit_params{cc} - fit parameters
%
%
%
% optional params, their default values, and what they specify:
%
% fit           'exp'                     	what kind of fit
%                                               'exp' - exponential, exp(b + a*g)
%
% 2009-09  gauthier
%


% SET UP OPTIONAL ARGUMENTS
p = inputParser;
p.addParamValue('fit','exp', @(x)any(strcmpi(x,{'exp'})));
p.parse(varargin{:});
params = p.Results;


% FIT NONLINEARITY

% initialize storage variable
num_cells = size(gen_signals, 2);
fit_params = cell(num_cells, 1);

% cycle through each cell
for cc = 1:num_cells

    switch params.fit
        case 'exp'

            % get spike times
            % if there are N spikes per bin, list that bin N times
            spike_times = [];
            for nn = 1:full(max(spikes(:,cc)))
                spike_times = [spike_times; find( spikes(:,cc)>(nn-1) )];
            end
            
            % define function that gives likelihood
            L = @(x)identify_SNL_scalars_fn(x,spike_times,gen_signals(:,cc));

            % turn gradient on
            options = optimset('GradObj','on');

            % identify best a and b
            fit = fminunc(L,[0 0],options)';
             
            fit_params{cc}.a = fit(1);
            fit_params{cc}.b = fit(2);
            fit_params{cc}.type = params.fit;

    end
    
end






function [L,g] = identify_SNL_scalars_fn(x,spike_times,gen_signal)

% likelihood
L =  length(spike_times)*x(2) + x(1)*sum(gen_signal(spike_times)) - ...
    exp(x(2))*sum(exp(x(1)*gen_signal))  ;
% gradient
if nargout > 1
    g(1) = sum(gen_signal(spike_times)) - exp(x(2))*sum(gen_signal.*exp(x(1)*gen_signal));
    g(2) = length(spike_times) - exp(x(2))*sum(exp(x(1)*gen_signal));
end

L = -L;
g = -g;