function [fit_params,gen_signals,params] = compute_snls(strfs,spikes,movie,varargin)
% compute_snl     Compute static nonlinearity and fit
%
%  NOTE: this code only supports white noise movies generated by obvius
%
% usage:  [fit_params,gen_signals,params] = compute_snls(strfs,spikes,movie,<params>)
%
% arguments:    strfs - cell array, each element a YxXxCxT matrix specifying STRF for each cell
%              spikes - FxN matrix of spike times, each column a time point, each row a cell
%               movie - java object of stimulus movie
%            <params> - struct or list of optional parameters (see below)
%
% outputs:  
%
%     NOTE: each of these output variables is a cell array/matrix,
%               each element/column corresponding to one neuron
%
%          fit_params{cc} - fit parameters
%       gen_signals(:,cc) - generator signal values for each stimulus frame
%
%
%
% optional params, their default values, and what they specify:
%
% verbose       true                        show output
% rois          []                         	YxXxN matrix specifying which stixels to use for calculation
%                                               if empty, use all stixels for all cells
%                                               can be sparse and/or boolean
% fit           'exp'                     	what kind of fit
%                                               'exp' - exponential, exp(b + a*g)
% start_stim    1                           first movie frame used in analysis
% end_stim      movie.size                  last movie frame
% num_frames    1                           how many temporal frames are in each STRF
% frame_offset  0                           how much each STRF is offset from 
% 
% 
%
%
%
% 2009-09  gauthier
%


% SET UP OPTIONAL ARGUMENTS

p = inputParser;

% specify list of optional parameters
p.addParamValue('verbose',  true );
p.addParamValue('rois',  [] );
p.addParamValue('fit','exp', @(x)any(strcmpi(x,{'exp'})));
p.addParamValue('start_stim', 1 );
p.addParamValue('end_stim', movie.size );
p.addParamValue('num_frames', 1 );

% resolve user input and default values
p.parse(varargin{:});

% get params struct
params = p.Results;




% BODY OF THE FUNCTION


% note stimulus size
field_width = movie.getWidth;
field_height = movie.getHeight;

% identify numbers of things
start_stim = params.start_stim;
end_stim = params.end_stim;
num_frames = params.num_frames;
num_stims = end_stim - start_stim + 1;
num_cells = length(strfs);

% first_stim is the earliest stimulus frame for which a generator signal value can be computed
first_stim = start_stim + num_frames - 1;



% pare spikes down to just the time period of interest
% and account for temporal duration of each RF
spikes = spikes(first_stim:end_stim,:);






% GET GENERATOR SIGNAL VALUES

% show output
if params.verbose
    fprintf(
    T=text_waitbar(sprintf('Getting generator signal values for %d frames...',num_stims));
    start_time = clock; % note when it started
end


% initialize storage variables
gen_signals = zeros(num_stims-num_frames+1,num_cells);


% cycle through each stimulus
for ss = start_stim:end_stim

    if params.verbose
        T=text_waitbar(T,(ss-start_stim)/num_stims - 0.01);
    end
    
    
    % get new frame
    STAFrame = movie.getFrame(ss-1);
    new_frame = permute(reshape(STAFrame.getBuffer,3,field_width,field_height),[3 2 1]) - .5;

    % if first_stim hasn't been reached yet
    if ss < first_stim
        % load this frame
        stims(:,ss-start_stim+1+1) = reshape(new_frame,[],1);
        % keep going
        continue
    end
        
    % shift current frames over
    stims(:,1:end-1) = stims(:,2:end);
    % assign new frame to the final position
    stims(:,end) = reshape(new_frame,[],1);


    % get generator signal values for each cell
    for cc = 1:num_cells
        % get STRF
        strf = strfs{cc};

        % get stimulus in relevant region
        roi = repmat(full(params.rois(:,cc)),3,1);
        stim = reshape(stims(roi,:),[],1);

        % take dot product
        stim_num = ss - first_stim + 1;
        gen_signals(stim_num,cc) = stim'*strf;
    end


end


% display how long it took
if params.verbose
    fprintf('done (%0.1f seconds)\n',etime(clock,start_time));
end





% FIT NONLINEARITY

% initialize storage variable
fit_params = cell(num_cells,1);

% cycle through each cell
for cc = 1:num_cells

    switch params.fit
        case 'exp'

            % get spike times
            % if there are N spikes per bin, list that bin N times
            spike_times = [];
            for nn = 1:full(max(spikes(:,cc)))
                spike_times = [spike_times; find( spikes(:,cc)>(nn-1) )];
            end
            
            % define function that gives likelihood
            L = @(x)identify_SNL_scalars_fn(x,spike_times,gen_signals(:,cc));

            % turn gradient on
            options = optimset('GradObj','on');

            % identify best a and b
            fit = fminunc(L,[0 0],options)';
             
            fit_params{cc}.a = fit(1);
            fit_params{cc}.b = fit(2);
            fit_params{cc}.type = params.fit;
    end
    
    
end






function [L,g] = identify_SNL_scalars_fn(x,spike_times,gen_signal)

% likelihood
L =  length(spike_times)*x(2) + x(1)*sum(gen_signal(spike_times)) - ...
    exp(x(2))*sum(exp(x(1)*gen_signal))  ;
% gradient
if nargout > 1
    g(1) = sum(gen_signal(spike_times)) - exp(x(2))*sum(gen_signal.*exp(x(1)*gen_signal));
    g(2) = length(spike_times) - exp(x(2))*sum(exp(x(1)*gen_signal));
end

L = -L;
g = -g;


