function [result newThreshes] = bootstrapThresh(elecResp, nReps, varargin)

% bootstrapping to determine threshold standard deviations
%
% to determine standard deviation based on the first n pulses only, use nDraws parameter
%
% if nDraws parameter is not set to some integer value, 'result' is just the standard deviation of
% the nReps repetitions of bootstrapping
%
% if nDraws parameter is set to some integer value, 'result' is a structure with the fields:
%      .stdevAllPulses -- equivalent to 'result' when nDraws is not set
%      .meanAllPulses  -- mean threshold value when all all pulses are used
%      .stdevNDraws    -- standard deviation of threshold when bootstrapping only draws nDraws times
%                         from first nDraws pulses
%      .meanNDraws     -- mean of thresholds when bootstrapping only draws nDraws times from first
%                         nDraws pulses
%
% update 2011-08-24: removed 'scaleType' option because log-scale erf fits
% are no longer used, and removed corrections for zeros generated by rand,
% since rand draws from the open interval (0,1) and shouldn't ever give a zero
%


p = inputParser;

p.addRequired('elecResp', @isstruct)
p.addRequired('nReps', @isnumeric)


%p.addParamValue('scaleType', 'linear', @(x)any(strcmpi(x,{'linear', 'log'})))
p.addParamValue('nDraws', [], @isnumeric) %only draws nDraws times from first nDraws pulses (must be < nPulses!)
p.addParamValue('plotDist', false, @islogical) %whether to plot a histogram of the resulting thresholds (corresponding to nDraws = nPulses)

p.parse(elecResp, nReps, varargin{:})

% if strcmpi(p.Results.scaleType, 'log')
%     logScale = 1;
% else
%     logScale = 0;
% end

nDraws = p.Results.nDraws;
plotDist = p.Results.plotDist;

nMovies = length(elecResp.stimInfo.movieNos);

%marks which movies have been analyzed
analyzedMovies = false(nMovies, 1);
for i = 1:nMovies
    if ~isempty(elecResp.analysis.type{i})
        analyzedMovies(i) = true;
    end
end

newThreshes = zeros(nReps, 1);
if ~isempty(nDraws)
    newThreshesCompareNDraws = zeros(nReps, 1);
end


for j = 1:nReps
    newSuccessRates = inf*ones(nMovies, 1); %inf so that it's obvious if there's an error downstream
    if ~isempty(nDraws)
        newSuccessRatesCompareNDraws = inf*ones(nMovies, 1);
    end
    nPulses = zeros(1,nMovies);
    for i = 1:nMovies
        if analyzedMovies(i)
            nPulses(i) = length(elecResp.analysis.latencies{i});
            if ~isempty(nDraws)
                if nDraws <= nPulses(i)
                    randPick = ceil(rand([nDraws, 1])*nDraws);
                    newSuccessRatesCompareNDraws(i) = sum(elecResp.analysis.latencies{i}(randPick) ~= 0)/nDraws;
                else
                    errordlg('nDraws must be <= number of pulses--aborting!')
                end
            end
            randPick = ceil(rand([nPulses(i), 1])*nPulses(i));
            newSuccessRates(i) = sum(elecResp.analysis.latencies{i}(randPick) ~= 0)/nPulses(i);
        end
    end

    %extract analyzed movies from elecResp
    data(1,:) = abs(elecResp.stimInfo.stimAmps(analyzedMovies));
    data(2,:) = newSuccessRates(analyzedMovies);
    data(3,:) = nPulses(analyzedMovies);

    %fit data to erf
    erfParams = erfFitter(data, 2, -1, 'makePlot', 0);

    newThreshes(j) = -erfParams(2)/erfParams(1);
    
    % if nDraws are specified fit to erf with corresponding success rates as well
    if ~isempty(nDraws)
        data(2,:) = newSuccessRatesCompareNDraws(analyzedMovies);
        data(3,:) = nDraws*ones(1,nMovies);
        erfParams = erfFitter(data, 2, -1, 'makePlot', 0);

        newThreshesCompareNDraws(j) = -erfParams(2)/erfParams(1);
    end
end

if plotDist % plot histogram of thresholds and Gaussian from standard deviation and mean of thresholds
    figure
    [~, bins] = hist(newThreshes);
    hist(newThreshes); %plot it
    binwidth = bins(2)-bins(1);
    area = binwidth*nReps;
    
    hold on
    mu = mean(newThreshes);
    sig = std(newThreshes);
    xVals = linspace(min(newThreshes), max(newThreshes), 50);
    plot(xVals, area*normpdf(xVals, mu, sig), 'r-')
    xlabel('threshold value')
    ylabel('number of bootstrap repetitions')
end


    
if isempty(nDraws)
    result = std(newThreshes);
else
    result.stdevAllPulses = std(newThreshes);
    result.meanAllPulses = mean(newThreshes);
    result.stdevNDraws = std(newThreshesCompareNDraws);
    result.meanNDraws = mean(newThreshesCompareNDraws);
end



