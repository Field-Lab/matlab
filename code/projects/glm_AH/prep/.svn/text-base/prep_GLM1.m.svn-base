% preparing variables for fitting GLM with BW.
% note: prep_GLM1.m is for 2012-01-27-4, where the BW is presented in
% "block-design".  Due the the bug in the stimulus code (in lisp), we need
% to exclude those blocks that are susceptible to the bug.  This will be
% taken care of by the associated script, prep_GLM2.m

% output is stored under "prep2" directory (see below for the full path).

% edoi@salk.edu, 2012-04-29.

clear
glmhome = '/snle/home/snl-e/glm';

%-- load datarun
nm_exp = '2012-01-27-4';
com_dir = sprintf('/Volumes/Rat/Analysis/edoi/%s',nm_exp);
dn_mas  = 'data007'; % bookend data
datarun{1}.names.rrs_params_path  = sprintf('%s/%s/%s.params', com_dir,dn_mas,dn_mas);
datarun{1}.names.rrs_sta_path     = sprintf('%s/%s/%s.sta',    com_dir,dn_mas,dn_mas);
datarun{1}.default_sta_fits       = 'vision';

dn_slv  = 'data003'; % BW data
datarun{2}.names.rrs_neurons_path = sprintf('%s/%s/%s.neurons', com_dir,dn_slv,dn_slv);
datarun{2}.names.map_path         = sprintf(...
   '%s/%s/ei_map-from-_Volumes_Rat_Analysis_edoi_%s_%s_%s.txt',...
   com_dir,dn_slv,nm_exp,dn_mas,dn_mas);
datarun{2}.default_sta_fits = 'vision';

opt = struct('verbose',1,'load_params',1,'load_neurons',1);
datarun = load_data(datarun,opt);

if isfield(datarun{2}.names,'map_path')
   datarun=load_map(datarun);
else
   datarun=map_cell_types(datarun,'verbose',true);
end

%%

%-- define "testrun" - data for individual cell in the slave
% CID = [587,1338,1463,1505,1579,1863,1984,2012,2041,2056,2153,2208,2298,...
%    2358,2717,2765,2944,2957,3241,3362,3423,3601,3737,3766,3797,3857,3948,...
%    3993,4023,4038,4217,4278,4309,4339,4368,4382,4458,4518,4789,4892,5013,7592];
CID = 1505; % example

ntb_o = 13; %datarun{2}.no_trig_bl; % triggers per block (here 37)
ntb_e = 37;

ntb_oe = ntb_o+ntb_e;
n_rep = 60; %input('no of repeats [60]: ');
n_blk = n_rep*2; %input('how many blocks? (e.g., 100 if 50 repeats, 50 random): ');
datarun{2}.block.trig = cell(n_blk,1);

for k = 1:n_rep
   trg_oe = datarun{2}.triggers((k-1)*ntb_oe+1:k*ntb_oe);
   datarun{2}.block.trig{2*k-1} = trg_oe(1:ntb_o);
   datarun{2}.block.trig{2*k}   = trg_oe(ntb_o+1:end);
end

%%

sd.a = 1664525;
sd.c = 1013904223;
sd.m = 2^32;
sd.s = 11111; % initial seed

for kk = 1:length(CID)
   clear testrun
   testrun.cell_type = 'OFF-Parasol';
   testrun.cell_ids  = CID(kk);
   testrun.no_trig_bl = [ntb_o, ntb_e];
   testrun.t_trig = datarun{2}.triggers;
   testrun.cell_idx = find(datarun{2}.cell_ids==testrun.cell_ids);
   testrun.t_sp     = datarun{2}.spikes{testrun.cell_idx};

   sd.s = 11111; % don't forget to initialize for each cell!
   
   %-- load visual stimulus
   ts_vs.frames = [10,30]*120; % # frames per block: 30 sec/block x 120 frames/sec
   ts_vs.mov = cell(n_blk,1);
   datarun{2}.block.xml  = cell(n_blk,1);
   datarun{2}.block.trig = cell(n_blk,1);
   
   for k = 1:n_rep
      trg_oe = datarun{2}.triggers((k-1)*ntb_oe+1:k*ntb_oe);
      datarun{2}.block.trig{2*k-1} = trg_oe(1:ntb_o);
      datarun{2}.block.trig{2*k}   = trg_oe(ntb_o+1:end);
   end

   for k = 1:n_blk
      if rem(k,2) == 1
         datarun{2}.block.xml{k} = sprintf('%s/%s/xml/BW-8-1-0.48-11111.xml',com_dir,dn_slv);
      else
         sd.s = mod( (sd.a*sd.s + sd.c), sd.m);
         datarun{2}.block.xml{k} = sprintf('%s/%s/xml/lib/BW-8-1-0.48-%s.xml',...
            com_dir,dn_slv,int2str(uint32(sd.s)));
      end
      if (k == 1 || rem(k,2) == 0)
         mvi = load_movie(datarun{2}.block.xml{k}, datarun{2}.block.trig{k});
      end
      if k == 1
         ts_vs.refresh_time = mvi.getRefreshTime;
         ts_vs.height = mvi.getHeight;
         ts_vs.width  = mvi.getWidth;
      end
      if (k == 1 || rem(k,2) == 0)
         if k == 1
            fr_idx = 1;
         else
            fr_idx = 2;
         end
         mov = zeros(ts_vs.width, ts_vs.height, ts_vs.frames(fr_idx));
         for i = 1:ts_vs.frames(fr_idx)
            F = mvi.getFrame(i).getBuffer;
            F = reshape(F,3,ts_vs.width,ts_vs.height);
            mov(:,:,i) = F(1,:,:); % because of BW
         end
         ts_vs.mov{k} = mov; clear mov
      end
   end
   
   %clear F i k sd opt mvi ntb com_dir
   
   % interim summary:
   % now the relevant variables are datarun adn ts_vs.  datarun{2} is relevant
   % in the following analysis (note: datarun{1} is just master).
   
   %-- STA wrt all pixels
   datarun{2}.block.t_frame = cell(n_blk,1);
   testrun.block.t_sp = cell(n_blk,1);
   testrun.block.STA = cell(n_blk,1);
   testrun.block.nST = zeros(n_blk,1);
   
   for j = 1:n_blk
      datarun{2}.block.t_frame{j} = t_frame_interp(datarun{2}.block.trig{j});
      t_b = datarun{2}.block.t_frame{j}(1);
      t_e = datarun{2}.block.t_frame{j}(end);
      testrun.block.t_sp{j} = testrun.t_sp( (testrun.t_sp > t_b) & (testrun.t_sp < t_e) );
      
      if rem(j,2) == 0 % for the random block
         IDX      = nan(size(testrun.block.t_sp{j}));
         itv_bin  = mean(diff(datarun{2}.block.trig{j}))/100;
         %-- compute the closest frame index for each spike
         for k = 1:length(testrun.block.t_sp{j})
            t = testrun.block.t_sp{j}(k);
            [min_t,idx] = min(abs(datarun{2}.block.t_frame{j} - t));
            if min_t < itv_bin/2
               IDX(k) = idx;
            end
         end
         IDX = IDX(~isnan(IDX));
         
         testrun.nkt = 30; % number in "k" (stimulus filter) in time (i.e., frames)
         testrun.block.STA{j} = zeros(ts_vs.width,ts_vs.height,testrun.nkt);
         for k = 1:length(IDX)
            idx = IDX(k);
            if idx >=testrun.nkt
               testrun.block.STA{j} = testrun.block.STA{j} + ts_vs.mov{j}(:,:,idx:-1:idx-testrun.nkt+1);
            end
         end
         testrun.block.nST(j) = sum(IDX>=testrun.nkt);
      end
      if rem(j,10) == 0
         fprintf('%3d of %d\r',j,n_blk)
      end
   end
   fprintf('DONE\n')
   
   %-- averagint STA computed for each block
   testrun.STA = zeros(size(testrun.block.STA{2}));
   
   %== data-specific note:
   % data004 is not stationary in 0-30 and 2500-3000 sec, i.e., block # 1, 84-100.
   
   blk = 8:2:120;
   fprintf('in %s, %2d blocks are used to compute STA/STC\n',dn_slv,length(blk));
   for k = blk
      testrun.STA = testrun.STA + testrun.block.STA{k};
   end
   testrun.STA = testrun.STA/sum(testrun.block.nST(blk));
   
   [~,max_ind] = max(abs(testrun.STA(:)-1/2)); % max deviation from the mean
   [max_x,max_y,max_fr] = ind2sub(size(testrun.STA),max_ind);
   
   %-- for GLM
   slen = 15;
   if rem(slen,2) == 1
      testrun.ROI.o_s = (slen-1)/2; % off-set from the peak
   end
   
   testrun.ROI.ROI_x = (round(max_x)-testrun.ROI.o_s):(round(max_x+testrun.ROI.o_s));
   testrun.ROI.ROI_y = (round(max_y)-testrun.ROI.o_s):(round(max_y+testrun.ROI.o_s));
   testrun.ROI.max_xyfr = [max_x,max_y,max_fr];
   testrun.ROI.STA = testrun.STA(testrun.ROI.ROI_x,testrun.ROI.ROI_y,:);
   
   testrun.ROI.mov = cell(n_blk,1);
   for k = 1:n_blk
      if (k == 1 || rem(k,2) == 0)
         testrun.ROI.mov{k} = ts_vs.mov{k}(testrun.ROI.ROI_x,testrun.ROI.ROI_y,:);
      end
   end
   
   testrun.t_bin = ts_vs.refresh_time/1000; % in sec
   testrun.block.t_frame = datarun{2}.block.t_frame;
   
   %-- first several significant components in STA (in ROI)
   zmSTA = reshape(testrun.ROI.STA,slen^2,testrun.nkt);
   zmSTA = zmSTA-1/2; % subtract (true) mean value.
   rk = 15;
   [U,S,V] = svds(zmSTA,rk);
   
   testrun.ROI.zmSTA.STA = zmSTA;
   testrun.ROI.zmSTA.U = U;
   testrun.ROI.zmSTA.S = S;
   testrun.ROI.zmSTA.V = V;
   
   d_save = sprintf('%s/output/%s/BW/%s/prep2',glmhome,nm_exp,testrun.cell_type);
   if ~exist(d_save,'dir'),mkdir(d_save),end
   cd(d_save);
   
   for k = 1:rk
      figure(1), clf
      
      %-- raw STA
      subplot(3,4,1)
      imagesc(zmSTA')
      title(sprintf('STA (ID %4d)',testrun.cell_ids))
      xlabel('Space [stixel]')
      ylabel('Time [frame]')
      colorbar horizontal
      
      m_fr = testrun.ROI.max_xyfr(3);
      ax = 5:5:15;
      
      subplot(3,4,3)
      imagesc(reshape(zmSTA(:,m_fr),slen,slen)), axis image
      set(gca,'xtick',ax), set(gca,'ytick',ax)
      colorbar horizontal
      title(sprintf('Spatial STA at the peak (%d-th frame)',m_fr))
      
      %-- k-th rank
      idxk = zeros(rk,1);
      idxk(k) = 1;
      STAk = U*diag(idxk.*diag(S))*V';
      
      subplot(3,4,5)
      imagesc(STAk')
      title(sprintf('%d-th rank component',k))
      xlabel('Space [stixel]')
      ylabel('Time [frame]')
      colorbar horizontal
      
      m_fr = testrun.ROI.max_xyfr(3);
      
      subplot(3,4,7)
      imagesc(reshape(STAk(:,m_fr),slen,slen)), axis image
      set(gca,'xtick',ax), set(gca,'ytick',ax)
      colorbar horizontal
      title(sprintf('Spatial STA (%d-th frame)',m_fr))
      
      %-- cumulative
      idxc = zeros(rk,1);
      idxc(1:k) = 1;
      STAc = U*diag(idxc.*diag(S))*V';
      
      subplot(3,4,9)
      imagesc(STAc')
      title(sprintf('Rank-%d STA',k))
      xlabel('Space [stixel]')
      ylabel('Time [frame]')
      colorbar horizontal
      
      DIFc = zmSTA-STAc;
      subplot(3,4,10)
      imagesc(DIFc')
      err = var(DIFc(:))/var(zmSTA(:))*100;
      title(sprintf('Difference (%2.1f%s)',err,'%'))
      xlabel('Space [stixel]')
      ylabel('Time [frame]')
      colorbar horizontal
      
      subplot(3,4,11)
      imagesc(reshape(STAc(:,m_fr),slen,slen)), axis image
      set(gca,'xtick',ax), set(gca,'ytick',ax)
      colorbar horizontal
      title(sprintf('Spatial STA (%d-th frame)',m_fr))
      
      subplot(3,4,12)
      imagesc(reshape(DIFc(:,m_fr),slen,slen)), axis image
      xlabel('Space [stixel]')
      ylabel('Time [frame]')
      colorbar horizontal
      title('Difference')
      
      fl_print = 1;
      if fl_print
         fn = sprintf('STA_cid%d',testrun.cell_ids);
         orient landscape
         if k == 1
            eval(sprintf('print -dpsc2 %s',fn))
         else
            eval(sprintf('print -dpsc2 -append %s',fn))
         end
      else
         fprintf('check the figuer (not printing).\n')
         pause
      end
   end
   eval(sprintf('save testrun_id%d_%dsq testrun',testrun.cell_ids,testrun.ROI.o_s*2+1));
end