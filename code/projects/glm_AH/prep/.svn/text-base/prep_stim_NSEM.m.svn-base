%% saving the struct "testrun" including spikes, movies, ROI for GLM fita
% based on 2011-12-04-0/prep_testrun_eyemov_ROI.m
clear
glmhome = '/snle/home/snl-e/glm';

%-- load datarun
com_dir = '/Volumes/Rat/Analysis/edoi/2012-01-27-4';
dn_mas = 'data007';
datarun{1}.names.rrs_params_path = sprintf('%s/%s/%s.params', com_dir,dn_mas,dn_mas);
datarun{1}.names.rrs_sta_path    = sprintf('%s/%s/%s.sta',    com_dir,dn_mas,dn_mas);
datarun{1}.default_sta_fits      = 'vision';

dn_slv  = 'data005';
datarun{2}.names.rrs_neurons_path = sprintf('%s/%s/%s.neurons', com_dir,dn_slv,dn_slv);
datarun{2}.names.map_path         = sprintf(...
   '%s/%s/ei_map-from-_Volumes_Rat_Analysis_edoi_2012-01-27-4_data007_data007.txt',...
   com_dir,dn_slv);
datarun{2}.default_sta_fits = 'vision';

opt = struct('verbose',1,'load_params',1,'load_neurons',1);
datarun = load_data(datarun,opt);

if isfield(datarun{2}.names,'map_path')
   datarun=load_map(datarun);
else
   datarun=map_cell_types(datarun,'verbose',true);
end

ntb_o = 37; %datarun{2}.no_trig_bl; % triggers per block (here 37)
ntb_e = 73;
ntb_oe = ntb_o+ntb_e;
n_rep = 90; %input('no of repeats [unique repeat is up to 59 run]: ');
n_blk = n_rep*2;

datarun{2}.block.trig = cell(n_blk,1);
for k = 1:n_rep
   trg_oe = datarun{2}.triggers((k-1)*ntb_oe+1:k*ntb_oe);
   datarun{2}.block.trig{2*k-1} = trg_oe(1:ntb_o);
   datarun{2}.block.trig{2*k}   = trg_oe(ntb_o+1:end);
end

clear dn_* opt

%-- define "testrun" - data for individual cell in the slave
ctype = 'OFF-Parasol'; %input('cell type [ON-Parasol or OFF-Parasol]: ','s');
switch (ctype)
   case 'ON-Parasol'
   case 'OFF-Parasol'
      %CID = [1463,1505,1984,2298,2944,2957,3241,3601,3737,3948,4278];
      CID = [1505,1984,2298,2944,2957,3241,3601,3737,3948,4278];
end

for cid = 1:length(CID)
   testrun.cell_ids = CID(cid);
   testrun.cell_type = ctype;
   testrun.no_trig_bl = [ntb_o, ntb_e];
   testrun.t_trig = datarun{2}.triggers;
   testrun.cell_idx = find(datarun{2}.cell_ids==testrun.cell_ids);
   testrun.t_sp     = datarun{2}.spikes{testrun.cell_idx};
   
   % note: to check the raster, at this point, use code/2011-12-04-0/check_raster.m
   %-- choose spikes in each block
   datarun{2}.block.t_frame = cell(n_blk,1);
   testrun.block.t_sp = cell(n_blk,1);
   
   for j = 1:n_blk
      datarun{2}.block.t_frame{j} = t_frame_interp(datarun{2}.block.trig{j});
      t_b = datarun{2}.block.t_frame{j}(1);
      t_e = datarun{2}.block.t_frame{j}(end);
      testrun.block.t_sp{j} = testrun.t_sp( (testrun.t_sp > t_b) & (testrun.t_sp < t_e) );
   end
   testrun.block.t_frame = datarun{2}.block.t_frame;
   % eval(sprintf('save %s/testrun_id%d_%s testrun',d_save,testrun.cell_ids,dn_slv));
   
   %-- load visual stimulus
   %ntb = datarun{2}.no_trig_bl; % triggers per block (here 37)
   ts_vs.frames = [30,60]*120; % # frames per block: 30 sec/block x 120 frames/sec
   ts_vs.mov = cell(n_blk,1);
   ts_vs.width = 80;
   ts_vs.height = 40;
   % note: in this experiment, there are only 20 unique stimulus sets, and from 2nd to 20th
   % are used as a unique long-run training data set.
   %datarun{2}.block.trig = cell(100,1);
   d_mov = sprintf('%s/output/2012-01-27-4/stim_NSEM',glmhome);
   c = 0;
   for k = [1,2:4:180] % 59 unique blocks for non-repeated trials;
      % note (2012-02-20): due to a bug in stim.lisp, every other non-repeated trial
      % has a unique stimulus.  so, instead of 2:2:2*59, 2:4:180 (namely, 45 unique 
      % blocks)
      if k == 1
         c = c+1;
         load(sprintf('%s/eyemov%d',d_mov,c),'Xr'); % Xr: 3600x80x40, [0,255], double.
         Xr = reshape(Xr,3600,80*40); % now 3600x3200
         ts_vs.mov{k} = reshape(Xr',80,40,3600);          
      else
         c = c+1;
         Xr0 = zeros(7200,80*40);
         load(sprintf('%s/eyemov%d',d_mov,c),'Xr'); % Xr: 3600x80x40, [0,255], double.
         Xr0(1:3600,   :) = reshape(Xr,3600,80*40); % now 3600x3200
         c = c+1;
         load(sprintf('%s/eyemov%d',d_mov,c),'Xr'); % Xr: 3600x80x40, [0,255], double.
         Xr0(3601:7200,:) = reshape(Xr,3600,80*40); % now 2*3600 x 3200
         ts_vs.mov{k} = reshape(Xr0',80,40,2*3600); 
      end
   end
   
   % interim summary:
   % now the relevant variables are datarun adn ts_vs.  datarun{2} is relevant
   % in the following analysis (note: datarun{1} is just master).
   
   %-- STA wrt all pixels
   testrun.block.STA  = cell(n_blk,1);
   testrun.block.nST  = zeros(n_blk,1);
   
   for j = 6:4:180 % exclude the 2nd block due to adaptation
      %datarun{2}.block.t_frame{j} = t_frame_interp(datarun{2}.block.trig{j});
      t_b = datarun{2}.block.t_frame{j}(1);
      t_e = datarun{2}.block.t_frame{j}(end);
      testrun.block.t_sp{j} = testrun.t_sp( (testrun.t_sp > t_b) & (testrun.t_sp < t_e) );
      
      IDX      = nan(size(testrun.block.t_sp{j}));
      itv_bin  = mean(diff(datarun{2}.block.trig{j}))/100;
      %-- compute the closest frame index for each spike
      for k = 1:length(testrun.block.t_sp{j})
         t = testrun.block.t_sp{j}(k);
         [min_t,idx] = min(abs(datarun{2}.block.t_frame{j} - t));
         if min_t < itv_bin/2
            IDX(k) = idx;
         end
      end
      IDX = IDX(~isnan(IDX));
      
      testrun.nkt = 30; % number in "k" (stimulus filter) in time (i.e., frames)
      testrun.block.STA{j} = zeros(ts_vs.width,ts_vs.height,testrun.nkt);
      for k = 1:length(IDX)
         idx = IDX(k);
         if idx >= testrun.nkt
            testrun.block.STA{j} = testrun.block.STA{j} + ts_vs.mov{j}(:,:,idx:-1:idx-testrun.nkt+1);
         end
      end
      testrun.block.nST(j) = sum(IDX>=testrun.nkt);
   end
   
   testrun.block.t_frame = datarun{2}.block.t_frame;
   fprintf('DONE\n')
   
   %-- averaging STA computed for each block
   testrun.STA = zeros(size(testrun.block.STA{6}));
   for k = 6:4:180
      testrun.STA = testrun.STA + testrun.block.STA{k};
   end
   
   testrun.STA = testrun.STA/sum(testrun.block.nST);
   
   %-- note: got to use the index common with the BW
   %[~,max_ind] = max(abs(testrun.STA(:)-1/2)); % max deviation from the mean
   %[max_x,max_y,max_fr] = ind2sub(size(testrun.STA),max_ind);
   fn_bw = sprintf('%s/output/2012-01-27-4/BW/%s/prep3/testrun_id%d_15sq',...
       glmhome,ctype,testrun.cell_ids);
   trbw = load(fn_bw);
   
   testrun.ROI.o_s = 15; % off-set from the peak % note: 15 is side length, not off-set! (2012-02-20)
   testrun.ROI.ROI_x = trbw.testrun.ROI.ROI_x;
   testrun.ROI.ROI_y = trbw.testrun.ROI.ROI_y;
   testrun.ROI.max_xyfr = trbw.testrun.ROI.max_xyfr;
   clear trbw
   testrun.ROI.STA = testrun.STA(testrun.ROI.ROI_x,testrun.ROI.ROI_y,:);
   
   testrun.ROI.mov = cell(100,1);
   for k = [1,2:4:180]
      testrun.ROI.mov{k} = ts_vs.mov{k}(testrun.ROI.ROI_x,testrun.ROI.ROI_y,:);
   end
   
   d_save = sprintf('%s/output/2012-01-27-4/stim_NSEM/%s',glmhome,ctype);
   eval(sprintf('save %s/testrun_id%d_ROI testrun',d_save,testrun.cell_ids))
   
end
